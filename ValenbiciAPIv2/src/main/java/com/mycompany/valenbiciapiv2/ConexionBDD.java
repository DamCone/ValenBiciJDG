/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.valenbiciapiv2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
//import DatosJSon;


/**
 *
 * @author FX506
 */
public class ConexionBDD extends javax.swing.JFrame {
    private static Connection con;
    private static DatosJSon dJSon;
    private static int numEst = 3;
    
    private static final String driver = "com.mysql.cj.jdbc.Driver";//com.mysql.jdbc.Driver";
    private static final String user = "root";
    private static final String pass = "alumnoalumno";
    private static final String url = "jdbc:mysql://127.0.0.1:33306/valenbicibd"; 
       /**
        * Creates new form ConexionBDD
        */
    public ConexionBDD() {
        initComponents();
        dJSon = new DatosJSon(numEst);
        jTextFieldNumEst.setText(""+numEst);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelEstConexBDD = new javax.swing.JLabel();
        jLabelDatosEstaciones = new javax.swing.JLabel();
        JButtonConectarBDD = new javax.swing.JButton();
        jLabelAddBDD = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonAddBDD = new javax.swing.JButton();
        jButtonDatos = new javax.swing.JButton();
        jTextFieldNumEst = new javax.swing.JTextField();
        jButtonCerrarCxBDD = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaEstadoConexion = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtextAreaAddBDD = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelEstConexBDD.setText("Estado Conexión:");

        jLabelDatosEstaciones.setText("Primero Obtener Datos de Estaciones y Conectar con BDD");

        JButtonConectarBDD.setText("Conectar");
        JButtonConectarBDD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JButtonConectarBDDMouseClicked(evt);
            }
        });

        jLabelAddBDD.setText("Introduce el Nº de estaciones a consultar:");

        jLabel2.setText("Obtener Datos de Estaciones:");

        jButtonAddBDD.setText("Añadir a BDD");
        jButtonAddBDD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAddBDDMouseClicked(evt);
            }
        });

        jButtonDatos.setText("Datos");
        jButtonDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDatosMouseClicked(evt);
            }
        });

        jTextFieldNumEst.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNumEstFocusLost(evt);
            }
        });

        jButtonCerrarCxBDD.setText("Cerrar Conexión");
        jButtonCerrarCxBDD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCerrarCxBDDMouseClicked(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextAreaEstadoConexion.setColumns(20);
        jTextAreaEstadoConexion.setRows(5);
        jScrollPane2.setViewportView(jTextAreaEstadoConexion);

        jtextAreaAddBDD.setColumns(20);
        jtextAreaAddBDD.setRows(5);
        jScrollPane3.setViewportView(jtextAreaAddBDD);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jButtonDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelAddBDD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldNumEst, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButtonAddBDD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(JButtonConectarBDD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jButtonCerrarCxBDD))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelEstConexBDD)
                                    .addComponent(jLabelDatosEstaciones))
                                .addGap(0, 127, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addComponent(jScrollPane3))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAddBDD)
                    .addComponent(jTextFieldNumEst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(88, 88, 88)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonDatos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JButtonConectarBDD)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelEstConexBDD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddBDD)
                    .addComponent(jLabelDatosEstaciones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonCerrarCxBDD)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JButtonConectarBDDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JButtonConectarBDDMouseClicked
        conector();
        jButtonAddBDD.setEnabled(true);
    }//GEN-LAST:event_JButtonConectarBDDMouseClicked

    private void jButtonDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDatosMouseClicked
        dJSon.mostrarDatos(numEst);
        jLabelDatosEstaciones.setText("Datos de estaciones:");
        jTextArea1.setText(dJSon.getDatos());
    }//GEN-LAST:event_jButtonDatosMouseClicked

    private void jButtonAddBDDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddBDDMouseClicked
        // TODO Añade aquí el código para insertar los datos de una estación en la base de datos.
        if (con == null || dJSon == null) {
            jtextAreaAddBDD.setText("Error: Conecta y obtén datos primero.");
            System.err.println("Error: Conecta y obtén datos primero.");
            return;
        }

        // Obtengo el array de strings empaquetados
        String[] allValues = dJSon.getValues();

        if (allValues == null || allValues.length == 0) {
             jtextAreaAddBDD.setText("Error: No hay datos cargados para añadir.");
             System.err.println("Error: No hay datos cargados para añadir.");
             return;
        }
        
        String sql = "INSERT INTO historico (estacion_id, direccion, bicis_disponibles, anclajes_libres, estado_operativo, ubicación) VALUES (?, ?, ?, ?, ?, POINT(?, ?))";
        PreparedStatement pstmt = null;
        int registrosInsertados = 0;
        int totalEstaciones = allValues.length;
        final String DELIMITER = ";"; //Delimitador

        try {
            pstmt = con.prepareStatement(sql);

            for (int i = 0; i < totalEstaciones; i++) {
                String singleStationData = allValues[i];
                if (singleStationData == null || singleStationData.isEmpty()) {
                    System.err.println("Advertencia: Datos vacíos para índice " + i + ", saltando.");
                    continue; // Saltar esta iteración
                }

                // --- Desempaquetar la cadena usando el delimitador ---
                String[] parts = singleStationData.split(DELIMITER);

                // Verificar que tenemos suficientes partes (7 en nuestro caso)
                if (parts.length < 7) {
                    System.err.println("Error: Formato de datos incorrecto para índice " + i + ": '" + singleStationData + "', saltando.");
                    continue;
                }

                try {
                    // --- Parsear cada parte al tipo correcto ---
                    // Orden: id;direccion;disponibles;libres;operativo(boolean);longitud;latitud
                    int estacionId = Integer.parseInt(parts[0].trim());
                    String direccion = parts[1].trim();
                    int disponibles = Integer.parseInt(parts[2].trim());
                    int libres = Integer.parseInt(parts[3].trim());
                    boolean operativo = Boolean.parseBoolean(parts[4].trim()); // "true"/"false"
                    double lon = Double.parseDouble(parts[5].trim());
                    double lat = Double.parseDouble(parts[6].trim());
                    // ---------------------------------------------

                    // --- Asignar valores al PreparedStatement ---
                    pstmt.setInt(1, estacionId);
                    pstmt.setString(2, direccion);
                    pstmt.setInt(3, disponibles);
                    pstmt.setInt(4, libres);
                    pstmt.setBoolean(5, operativo);
                    pstmt.setDouble(6, lon); // Longitud para POINT
                    pstmt.setDouble(7, lat);  // Latitud para POINT
                    // ------------------------------------------

                    // Ejecutar
                    int affectedRows = pstmt.executeUpdate();
                    if (affectedRows > 0) {
                        registrosInsertados++;
                    }

                } catch (NumberFormatException nfe) {
                    System.err.println("Error al parsear número para índice " + i + ": '" + singleStationData + "' - " + nfe.getMessage() + ", saltando.");
                } catch (ArrayIndexOutOfBoundsException aioobe) {
                     System.err.println("Error: Faltan datos en la cadena para índice " + i + ": '" + singleStationData + "', saltando.");
                } catch (SQLException sqlExInner) {
                    System.err.println("Error SQL al insertar índice " + i + ": " + sqlExInner.getMessage() + ", saltando.");
                }
            } // Fin del bucle for

            jtextAreaAddBDD.setText(registrosInsertados + " de " + totalEstaciones + " estaciones intentadas insertadas.");
            System.out.println(registrosInsertados + " de " + totalEstaciones + " estaciones intentadas insertadas.");

        } catch (SQLException e) {
            jtextAreaAddBDD.setText("Error SQL general: " + e.getMessage());
            System.err.println("Error SQL general al añadir a BDD: " + e.getMessage());
            Logger.getLogger(ConexionBDD.class.getName()).log(Level.SEVERE, "Error SQL en AddBDD", e);
        } finally {
            if (pstmt != null) {
                try {
                    pstmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(ConexionBDD.class.getName()).log(Level.WARNING, "Error al cerrar PreparedStatement", ex);
                }
            }
        }
    }//GEN-LAST:event_jButtonAddBDDMouseClicked

    private void jButtonCerrarCxBDDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCerrarCxBDDMouseClicked
        try {
            if (con != null && !con.isClosed()) {
                con.close();
                jtextAreaAddBDD.setText("Desconectado.");
                System.out.println("Conexión cerrada.");
                // Habilitar/deshabilitar botones
                JButtonConectarBDD.setEnabled(true);
                jButtonCerrarCxBDD.setEnabled(false);
                jButtonAddBDD.setEnabled(false); // No puedes añadir sin conexión
             } else {
                jtextAreaAddBDD.setText("Ya estaba desconectado.");
                System.out.println("La conexión ya estaba cerrada o nunca se estableció.");
            }
        } catch (SQLException ex) {
             jtextAreaAddBDD.setText("Error SQL al cerrar: " + ex.getMessage());
             System.err.println("Error SQL al cerrar la conexión: " + ex.getMessage());
             Logger.getLogger(ConexionBDD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonCerrarCxBDDMouseClicked

    private void jTextFieldNumEstFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNumEstFocusLost
        // TODO add your handling code here:
        numEst = Integer.parseInt(jTextFieldNumEst.getText());
        dJSon.mostrarDatos(numEst);
        jLabelDatosEstaciones.setText("Datos estaciones:");
        jTextArea1.setText(dJSon.getDatos());
    }//GEN-LAST:event_jTextFieldNumEstFocusLost
    public void conector() {
        jTextAreaEstadoConexion.setText("Conectando..."); // Actualiza la etiqueta
        try {
            // Cargar el driver
            Class.forName(driver);
            // Establecer la conexión
            con = DriverManager.getConnection(url, user, pass);
            // Si llegamos aquí, la conexión fue exitosa
            jTextAreaEstadoConexion.setText("Conectado a " + url); // Actualiza la etiqueta
            System.out.println("Conexión establecida con éxito."); // Para depuración

             // Habilitar botones que dependen de la conexión
             JButtonConectarBDD.setEnabled(false); // Deshabilitar conectar de nuevo
             jButtonCerrarCxBDD.setEnabled(true);
             jButtonAddBDD.setEnabled(true); // Habilitar añadir solo si hay conexión
        } catch (ClassNotFoundException e) {
            // Error si el driver .jar no está en el classpath
            jTextAreaEstadoConexion.setText("Error: Driver MySQL no encontrado.");
            System.err.println("Error: Driver MySQL no encontrado. Asegúrate de que mysql-connector-java.jar está añadido.");
            e.printStackTrace(); // Imprime el error detallado en la consola
            con = null; // Asegura que la conexión es nula
        } catch (SQLException e) {
            // Error al conectar (URL incorrecta, BD no existe, usuario/pass inválido, MySQL no iniciado)
            jTextAreaEstadoConexion.setText("Error SQL al conectar: " + e.getMessage());
            System.err.println("Error SQL al conectar: " + e.getMessage());
             e.printStackTrace();
             con = null; // Asegura que la conexión es nula
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConexionBDD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConexionBDD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConexionBDD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConexionBDD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConexionBDD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JButtonConectarBDD;
    private javax.swing.JButton jButtonAddBDD;
    private javax.swing.JButton jButtonCerrarCxBDD;
    private javax.swing.JButton jButtonDatos;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelAddBDD;
    private javax.swing.JLabel jLabelDatosEstaciones;
    private javax.swing.JLabel jLabelEstConexBDD;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextAreaEstadoConexion;
    private javax.swing.JTextField jTextFieldNumEst;
    private javax.swing.JTextArea jtextAreaAddBDD;
    // End of variables declaration//GEN-END:variables
}
